\chapter{A command-line interface}

In this chapter we document the command-line interface, \ie the command 
[[pytid]].

The command has a subcommand-based design, similar to commands like [[git]].
In this chapter we cover how we handle the subcommands and give the [[config]] 
subcommand as an example.
Other subcommands are given their own chapters.


\section{Outline}

We have the main module, provided in the [[init.py]] file.
<<init.py>>=
<<imports>>

def main():
  """
  The main function that runs the CLI. Call `main()` to start the CLI.
  """
  <<add CLI options and subcommands>>
  <<process the command line>>
  <<load the configuration>>
  <<run the subcommand>>
@


\section{The subcommands design}

We will use the [[argparse]] package for parsing the command-line arguments.
We will also use [[argcomplete]] to provide tab completion on the command line.
<<imports>>=
import argcomplete
import argparse
@

We can set up [[argparse]] for using subparsers.
The subparser object can then be passed to a function in each subcommand module 
which adds the subcommand to the parser.
<<add CLI options and subcommands>>=
argp = argparse.ArgumentParser(
  description="Time mangement for teaching",
  epilog="Web: https://github.com/dbosk/pytid")

subp = argp.add_subparsers(
  title="commands",
  dest="command",
  required=True)

<<add global options to argp>>
<<add subcommands to subp>>
@

Then we can process the command line.
<<process the command line>>=
argcomplete.autocomplete(argp)
args = argp.parse_args()
@


\section{Running the subcommands}

Each subcommand resides in a module.
In that module there should be a function~[[add_command]] taking the 
subparser~[[subp]] as an argument.

The [[config]] command will reside in the [[pytid.cli.config]] module.
Then it's sufficient to load it like this.
<<imports>>=
import pytid.cli.config
@
<<add subcommands to subp>>=
pytid.cli.config.add_command(subp)
@

Each subcommand should add a parser ([[subp.add_parser]]) that will set the 
[[func]] attribute to point to the function that should be run.
This function takes two arguments:
\begin{enumerate}
\item a dictionary containing the configuration as argument,
\item the [[args]] object containing the parsed command line.
\end{enumerate}
Then we can run the command like this.
<<run the subcommand>>=
if args.func:
  args.func(config, args)
@

\section{The configuration}

As mentioned above, the [[config]] command will reside in the 
[[pytid.cli.config]] module.
<<config.py>>=
<<config imports>>
<<config functions>>
@

<<config imports>>=
import json
@

<<config functions>>=
def add_command(subp):
  """
  Add the `config` command to the argparse subparser `subp`.
  """
@

\subsection{Loading the configuration}

<<add global options to argp>>=
@

<<load the configuration>>=
config = read_configuration(args.config_file)

hostname, token = canvaslms.cli.login.load_credentials(config)

if not (hostname and token):
  err(1, "No hostname or token, run 'canvaslms login'")

canvas = Canvas(hostname, token)
@

