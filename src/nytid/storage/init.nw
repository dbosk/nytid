\chapter{Storage overview}

In this chapter we will describe the design of the backend storage system.
We will provide a general design.
We want to have several possible backends with the same interface:
\begin{itemize}
\item The AFS file system
\item Git version management, \eg GitHub.
\item Google Sheets
\end{itemize}

We want to use the [[with]] protocol and hide the storage backend.
For example, the following two cases should yield the same.
We access the file [[bookings.csv]] for the course [[prgm23]] using the AFS 
backend.
\begin{minted}{python}
import nytid.storage.afs as storage

course_storage = storage.StorageRoot("/afs/kth.se/home/d/b/dbosk/.config/nytid/prgm23")

with course_storage.open("bookings.csv") as bookings:
  # do something with bookings
  pass
\end{minted}
Now we do the same with the Git backend.
We see that there are only two differences: the [[import]] statement and the 
location/path/URL for the storage.
\begin{minted}[highlightlines={1,3}]{python}
import nytid.storage.git as storage

course_storage = storage.StorageRoot("git@github.com/dbosk/prgm23.nytid")

with course_storage.open("bookings.csv") as bookings:
  # do something with bookings
  pass
\end{minted}
Whenever we close the file after writing, the Git storage will commit and push 
it.

In each storage module we want a class [[StorageRoot]] that allows us to use 
files in that particular storage..


\section{Code outline}

We want a class [[StorageRoot]] that encapsulates a directory and allows us to 
open files inside that directory or subdirectories.
<<init.py>>=
import os

class StorageRoot:
  """
  Abstracts the storage system. This allows us to use paths relative to a root. 
  This of this as a simple chroot jail (just not for security).
  """

  def __init__(self, path):
    """
    Uses `path` as the root. All files opened are in subdirectories of `path`.
    """
    self.__root = path
    <<StorageRoot constructor body>>

  @property
  def root(self):
    return self.__root

  <<StorageRoot methods>>
@

We also add the tests in a test file that will be used by [[pytest]].
We need a temporary directory that we can use as the root.
<<test storage.py>>=
import tempfile

from nytid.storage import *

root_dir = tempfile.TemporaryDirectory()

<<test functions>>
@

This way we can test the class above.
<<test functions>>=
def test_StorageRoot():
  root = StorageRoot(root_dir.name)
  assert root.root == root_dir.name
@


\section{Opening a file in storage}

We want to open a file relative to a particular directory.
We will use Python's [[os.open]] to open a directory and then open files 
relative to it using an opener.
<<StorageRoot methods>>=
def open(self, *args, **kwargs):
  """
  Takes the same arguments as built-in `open`.
  """
  return open(*args, **kwargs, opener=self.__opener)
@

The opener is a particular function that the [[open]] built-in will call to 
open the file.
This opener will ensure that the filename is relative to the root.
<<StorageRoot methods>>=
def __opener(self, path, flags):
  """The opener, used internally"""
  return os.open(path, flags, dir_fd=self.__dir_fd)
@
<<StorageRoot constructor body>>=
self.__dir_fd = os.open(self.root, os.O_RDONLY)
@

Since this causes the directory file descriptor to be open, we need some way to 
close it as well.
<<StorageRoot methods>>=
def close(self):
  """Close the storage root"""
  os.close(self.__dir_fd)
@

We test this as follows.
<<test functions>>=
def test_open_close():
  test_string = "StorageRoot test"
  root = StorageRoot(root_dir.name)

  with root.open("test.txt", "w") as f:
    f.write(test_string)

  with root.open("test.txt") as f:
    assert f.read() == test_string

  with open(f"{root_dir.name}/test.txt") as f:
    assert f.read() == test_string

  root.close()
@


\section{The [[with]] statement}

We also want to be able to use the storage in a [[with]] statement.
This means that we need the [[__enter__]] and [[__exit__]] methods.
However, we only need to specify that we should run [[.close]] on exit.
<<StorageRoot methods>>=
def __enter__(self):
  """Enter of with statement"""
  return self

def __exit__(self, *args):
  """Exit of with statement"""
  self.close()
@

We test this as follows.
<<test functions>>=
def test_with_StorageRoot():
  test_string = "StorageRoot test"

  with StorageRoot(root_dir.name) as root:
    with root.open("test.txt", "w") as f:
      f.write(test_string)

    with root.open("test.txt") as f:
      assert f.read() == test_string

  try:
    root.open("test.txt")
  except:
    assert True
  else:
    assert False
@


\section{Permissions}
