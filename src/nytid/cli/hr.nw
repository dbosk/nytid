\chapter{The [[cli.hr]] module and the [[hr]] subcommands}%
\label{cli.signupsheets}

In this chapter we introduce the subommands found under [[nytid signupsheets]],
it's the [[cli.signupsheets]] module.
<<hr.py>>=
import arrow
import csv
import datetime
from enum import Enum
import ics.icalendar
import logging
import pathlib
import os
import sys
import typer
from typing_extensions import Annotated

from nytid.signup import hr
from nytid.signup import sheets
import operator

from nytid.cli import courses as coursescli
from nytid.cli.signupsheets import SIGNUPSHEET_URL_PATH
from nytid import courses as courseutils
from nytid import schedules as schedutils
from nytid.signup import hr
from nytid.signup import sheets

<<imports>>

cli = typer.Typer(name="hr",
                  help="Manage sign-up sheets for teaching")

<<helper functions>>
<<argument and option definitions>>
<<subcommands>>
@


\section{Default arguments for matching courses and users}

The first argument we need is to identify a set of courses.
For this we might also have to identify a set of registers.
We'll use the argument and option defined in the [[cli.courses]] module.
We'll default to all courses ([[.*]]) in the register of the [[mine]] command.
<<argument for matching courses>>=
course: Annotated[str, coursescli.course_arg_regex]
<<option for matching registers, default to mine>>=
register: Annotated[str, coursescli.register_opt_regex] = coursescli.MINE
@

Then we can create a list of course--configuration pairs like this.
<<set list [[courses]] to ((course, register), config)-pairs>>=
registers = coursescli.registers_regex(register)
courses = {}
for course_reg in coursescli.courses_regex(course, registers):
  try:
    courses[course_reg] = courseutils.get_course_config(*course_reg)
  <<handle errors for accessing course data>>
<<handle errors for accessing course data>>=
except KeyError as err:
  logging.warning(err)
except PermissionError as err:
  course, register = course_reg
  logging.warning(f"You don't have access to {course} in {register}: {err}")
@

Now, if that list is empty, we have no courses, then we exit with a non-zero 
return code.
<<set list [[courses]] to ((course, register), config)-pairs>>=
if not courses:
  sys.exit(1)
@

We also need a username.
We will default to the username of the logged in user.
<<option for username to filter for>>=
user: Annotated[str, username_opt] = default_username
<<argument and option definitions>>=
try:
  default_username = os.environ["USER"]
except KeyError:
  default_username = None

username_opt = typer.Option(help="Username to filter sign-up sheet for, "
                                 "defaults to logged in user's username.")
@



\section{Teaching time totals for a course}

We provide a command [[time]] that summarizes the time spent on the course.
<<subcommands>>=
@cli.command()
def time(<<argument for matching courses>>,
         <<option for matching registers, default to mine>>):
  """
  Summarizes the time spent on teaching the course(s).
  """
  <<set list [[courses]] to ((course, register), config)-pairs>>

  booked = []
  for (course, register), config in courses.items():
    <<add to [[booked]] from [[course]] in [[register]] using [[config]]>>

  <<print summary of [[booked]]>>
@

To add the bookings of a course to [[booked]], we simply get the URL of the 
sign-up sheet and read the bookings.
<<add to [[booked]] from [[course]] in [[register]] using [[config]]>>=
url = config.get(SIGNUPSHEET_URL_PATH)
<<convert [[url]] to Google Sheet CSV-export URL if necessary>>
booked += sheets.read_signup_sheet_from_url(url)
<<imports>>=
from nytid.signup import sheets
@

If it's a Google Sheets sharing URL, we want to convert it to the export-CSV 
URL.
<<convert [[url]] to Google Sheet CSV-export URL if necessary>>=
if "docs.google.com" in url:
  url = sheets.google_sheet_to_csv_url(url)
@

Once we have [[booked]] we can start to compute summaries.
<<print summary of [[booked]]>>=
h_per_student = hr.hours_per_student(booked)

for event, hours in h_per_student.items():
    print(f"{event}: {to_hours(hours):.2f} h/student")

print(f"Booked: {to_hours(hr.total_hours(booked)):.2f} h "
        f"({to_hours(hr.max_hours(booked)):.2f} h)\n")

print("# Amanuenser")

amanuensis = hr.compute_amanuensis_data(booked)

for user, data in amanuensis.items():
    if not user:
        continue
    print(f"{user}: {data[2]:.2f} h, "
          f"{100*hr.compute_percentage(*data):.1f}%: "
          f"{data[0].format('YYYY-MM-DD')}--{data[1].format('YYYY-MM-DD')}")

print()
print("# Hourly")

for user, hours in hr.hours_per_TA(booked).items():
  if not user or user in amanuensis:
      continue
  print(f"{user}: {to_hours(hours):.2f} h")
<<imports>>=
from nytid.signup import utils
from nytid.signup import hr
<<helper functions>>=
def to_hours(td):
    return td.total_seconds()/60/60
@


\section{Staff booked on course}

We want a list of the usernames of who is booked on the course.
We'll simply read the sign-up sheet and extract all usernames.
<<subcommands>>=
@cli.command()
def users(<<argument for matching courses>>,
          <<option for matching registers, default to mine>>):
  """
  Prints the list of all usernames booked on the course.
  """
  <<set list [[courses]] to ((course, register), config)-pairs>>

  booked = []
  for (course, register), config in courses.items():
    <<add to [[booked]] from [[course]] in [[register]] using [[config]]>>

  for user in hr.hours_per_TA(booked):
    print(user)
@


\section{Amanuensis}

We want the have an amanuensis command that can generate employment info for an 
amanuensis.
We also want to automatically store the sessions that are included in that 
employment.
This way we can easily calculate what has changed later to track 
\enquote{\foreignlanguage{swedish}{mertid}}.
<<subcommands>>=
@cli.command(name="contract")
def amanuens_cmd(<<option for TAs to filter for>>,
                 <<default argument for start date>>,
                 <<argument for matching courses>> = ".*",
                 <<option for matching registers, default to mine>>):
  """
  Computes amanuensis data for a TA.
  """
  <<set list [[courses]] to ((course, register), config)-pairs>>

  booked = []
  for (course, register), config in courses.items():
    <<add to [[booked]] from [[course]] in [[register]] using [[config]]>>

  if start:
    start = arrow.Arrow(start.year, start.month, start.day)
    amanuensis = hr.compute_amanuensis_data(booked,
                                            begin_date=start)
  else:
    amanuensis = hr.compute_amanuensis_data(booked)

  <<amanuensis iteration variables>>
  for user in amanuensis:
    <<skip if [[user_regex]] doesn't match [[user]]>>
    <<print amanuensis data for [[user]]>>
@

\subsection{Default arguments for user regex}

We just set up an option defaulting to match anything.
<<option for TAs to filter for>>=
user_regex: Annotated[str, user_regex_opt] = ".*"
<<argument and option definitions>>=
user_regex_opt = typer.Option(help="Regex to match TAs' usernames that "
                                   "should be included.")
@

This allows us to do the check using regexes.
We compile the regex since we're going to make several matches.
<<amanuensis iteration variables>>=
user_pattern = re.compile(user_regex)
<<imports>>=
import re
<<skip if [[user_regex]] doesn't match [[user]]>>=
if not user_pattern.match(user):
  continue
@

\subsection{Default arguments for start date}

We'd like to force the start date in some situations, for instance, we need a 
later start date due to the TA not applying for the amanuensis position on 
time.
The option simply takes a date, it defaults to [[None]].
<<default argument for start date>>=
start: Annotated[datetime.datetime, start_date_opt] = None
<<argument and option definitions>>=
start_date_opt = typer.Option(help="The start date",
                              formats=["%Y-%m-%d"])
@

\subsection{Print the amanuensis data for a TA}

We may want to print for several users.
In that case, we want to separate the output with a newline.
<<amanuensis iteration variables>>=
first_print = True
<<print amanuensis data for [[user]]>>=
if first_print:
  first_print = False
else:
  print("\n")

data = amanuensis[user]

<<print a summary of the hours for [[user]] in [[data]]>>

<<filter out [[events]] for [[user]]>>
<<print summary for each event type for [[user]]>>

print()

<<print [[events]] in CSV format>>
@

\subsubsection{Print a summary of the hours for a TA}

<<print a summary of the hours for [[user]] in [[data]]>>=
start = data[0]
end = data[1]
print(f"{user}: {data[2]:.2f} h, "
      f"{round(100*hr.compute_percentage(*data))}%: "
      f"{start.format('YYYY-MM-DD')}--{end.format('YYYY-MM-DD')}")
<<filter out [[events]] for [[user]]>>=
events = sheets.filter_events_by_TA(user, booked)
events = filter(lambda x: user in sheets.get_booked_TAs_from_csv(x)[0], booked)
events = list(map(lambda x: x[0:len(sheets.SIGNUP_SHEET_HEADER)] + [user], 
                  events))
<<print summary for each event type for [[user]]>>=
for event, hours in hr.hours_per_event(events).items():
    print(f"{event}: {to_hours(hours)}")
<<print [[events]] in CSV format>>=
csvout = csv.writer(sys.stdout)

for event in events:
    csvout.writerow(event)
