\chapter{Recruiting TAs:
         the \texttt{recruit} commands and
         the \texttt{cli.recruit} module}%
\label{recruit}\label{cli.recruit}%

We want to recruit new TAs to help out on a course.
This is something that we must do regularly.
The ways we can do this are the following (in order of priority):
\begin{enumerate}
  \item\label{RecruitLastYear} We try to recruit the TAs from last year to do 
  one more year.
  We already have the data in the system.
  We can simply get the list of usernames and email those TAs.
  \item\label{RecruitFriends} The experienced TAs recommend new TAs.
  We can just record the username of the recommended TA.
  \item\label{RecruitPresentations} We have students that have performed well 
  during lab presentations or actively participated in the interactions during 
  teaching sessions.
  If we think they explain well we can just record their username.
  \item\label{RecruitEmail} We have a pool of students that have expressed an 
  interest in becoming a TA.
  Then we can also just record the students username (based on their email).
\end{enumerate}

We note that in the cases \ref{RecruitFriends}, \ref{RecruitPresentations} and 
\ref{RecruitEmail}, we just need to record the username of the potential TA.
However, we also need other data: the course or courses that they're interested 
in and that they are qualified for.
In the case of \ref{RecruitLastYear}, we already have this data.
This means that we need a command to track these data:
\begin{minted}{bash}
nytid recruit recommend --code "DD131[07]" user1 user2 user3 ...
nytid recruit recommend --code DD1320 user1 user4 ...
\end{minted}
We can either add several rounds of recommendations or just use a regular 
expression to match the course code.

Later, when it's time for to recruit TAs for the course, we can use the course 
code of the course to match the recommended TAs.
We can also use the related course codes for the course to match the 
recommended TAs.
Remember, we put these in the config when we created the course\footnote{%
  See \cref{TweakConfig} for a recap.
}:
\begin{minted}[highlightlines={2,3}]{text}
contact = Daniel Bosk <dbosk@kth.se>
code = DD1317
related_codes = ['DD1310']
ics = https://cloud.timeedit.net/kth/web/staff01/ri63n6ZbgQ60wZQ000Q3YQ98Z86uX1eZQ5QY886y0055056YtZ55d550E35F944774D3tC25CD52Q70DAD28212CEZD8.ics
data_path = /afs/kth.se/misc/projects/eecs/tcs/nytid/courses/prgi24/data
num_students = 160
num_groups = 6
signupsheet.url = https://docs.google.com/spreadsheets/d/1_u8dBWh0P5Y6rc1jvpzIOQo_LUhoirgc60Rv6rBFPng/edit?usp=sharing
\end{minted}

Now, we also want a command to list the recommended TAs.
Remember that the list from above was in order of priority.
This means that we might want to also keep track of the priority of the 
recommendation.
So we want to extend the command above to also take a priority.
\begin{minted}{bash}
nytid recruit recommend --code "DD131[07]" --prio 0 user1 user2 user3 ...
nytid recruit recommend --code "DD131[07]" --prio 1 user4 user5 user6 ...
nytid recruit recommend --code DD1320 --prio -1 user1 user4 ...
\end{minted}
Then we could have a command to list the recommended TAs of a given priority 
for the course:
\begin{minted}{bash}
nytid recruit recommended prgi24 --code "DD1317" --prio 1
nytid recruit recommended prgi24 --code "DD1317" --prio-ge 0
\end{minted}
We want to be able to get all recommended TAs of a given priority or all 
recommended TAs with a priority greater than or equal a given value.

the teacher can open the recruitment process and send an announcement to the 
TAs in the pool for the course.
\begin{description}
  \item[Teacher]  \mintinline{bash}{nytid recruit open --course "prgi24"}
  \item[Teacher]  \mintinline{bash}{nytid recruit send --course "prgi24"}
\end{description}


